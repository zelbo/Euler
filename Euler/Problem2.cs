// --------------------
// Even Fibonacci numbers: Problem 2
// --------------------
/* Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 */
/* upperLimit = 4,000,000 (do not exceed == inclusive)
 * while doExit == false, fibonacci
 * if fibonacci is even, add to total.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Euler
{
    partial class Program
    {
        public static long Problem2()
        {
            long lastAdded = 0;
            long fibonacciSeed1 = 1;
            long fibonacciSeed2 = 2;

            mySum = 0;

            Fibonacci myFibonacci = new Fibonacci();
            myFibonacci.Initialize(fibonacciSeed1, fibonacciSeed2);
            AddIfEven(myFibonacci.GetLast());

            doExit = false;
            while (!doExit)
            {
                lastAdded = myFibonacci.GetLast();
                if (lastAdded <= myMax)
                {
                    AddIfEven(lastAdded);
                    myFibonacci.Step();
                    
                }
                else
                {
                    doExit = true;
                }


                /* upperLimit = 4,000,000 (do not exceed == inclusive)
                * while doExit == false, fibonacci
                * if fibonacci is even, add to total.
                */

            }

            return mySum;
        }

        public static void AddIfEven(long testNumber)
        {
            if (testNumber <= myMax && isEven(testNumber))
            {
                mySum += testNumber;
            }
        }
    }


}